function XO(str) {
  let x = str.match(/x/gi);
  let o = str.match(/o/gi);
  // console.log(x, (x && x.length), o, (o && o.length));
  return (x && x.length) === (o && o.length);
}

console.log(XO('Ox 0 Xo Xx ppp Oo'));

console.log(0 && ['q', '8'], '1 false')
console.log(1 && ['q', '8'], '2 true')
console.log('' && ['q', '8'], '3 false')
console.log(null && ['q', '8'], '4 false')
console.log(NaN && ['q', '8'], '5 false')
console.log(undefined && ['q', '8'], '6 false')
console.log(false && ['q', '8'], '7 false')
console.log(true && ['q', '8'], '8 true')
// true
// 0 1 false
// [ 'q', '8' ] 2 true
//  3 false
// null 4 false
// NaN 5 false
// undefined 6 false
// false 7 false
// [ 'q', '8' ] 8 true

// И «&&» находит первое ложное значение
// При нескольких подряд операторах И:

// result = value1 && value2 && value3;
// Оператор && выполняет следующие действия:

// Вычисляет операнды слева направо.
// Каждый операнд преобразует в логическое значение. Если результат false, останавливается и возвращает исходное значение этого операнда.
// Если все операнды были истинными, возвращается последний.

// При выполнении ИЛИ || с несколькими значениями:

// result = value1 || value2 || value3;
// Оператор || выполняет следующие действия:

// Вычисляет операнды слева направо.
// Каждый операнд конвертирует в логическое значение. Если результат true, останавливается и возвращает исходное значение этого операнда.
// Если все операнды являются ложными (false), возвращает последний из них.
// Значение возвращается в исходном виде, без преобразования.
// Другими словами, цепочка ИЛИ "||" возвращает первое истинное значение или последнее, если такое значение не найдено.
